name: Run Gradle on PRs
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: the version to publish
jobs:
  gradle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.4.2

      - name: Import GPG key
        run: |
          mkdir -p ~/.gradle
          mkdir -p ~/.m2
          echo "${{ secrets.GPG_BASE64 }}" | base64 --decode > /tmp/gpg.key
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --import --passphrase-fd 0 /tmp/gpg.key
          echo "signing.keyId=BB19097D" >> ~/.gradle/gradle.properties
          echo "signing.password=${{ secrets.GPG_PASSPHRASE }}" >> ~/.gradle/gradle.properties
          echo "signing.secretKeyRingFile=/tmp/gpg.key" >> ~/.gradle/gradle.properties
          echo "gradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }}" >> ~/.gradle/gradle.properties
          echo "gradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }}" >> ~/.gradle/gradle.properties
          sed "s@MAVEN_CENTRAL_PASSWORD@${{ secrets.MAVEN_CENTRAL_PORTAL_PASSWORD }}@" maven-plugin/settings.xml.tmpl | sed "s@MAVEN_CENTRAL_USERNAME@${{ secrets.MAVEN_CENTRAL_PORTAL_USER_NAME }}@" > maven-plugin/settings.xml
          cp maven-plugin/settings.xml hibernate-provider/settings.xml

      - name: Setup Atlas
        uses: ariga/setup-atlas@master
        with:
          cloud-token: ${{ secrets.ATLAS_TOKEN }}

      - name: Build and test library & plugins
        run: PROVIDER_VERSION=0.0.0-SNAPSHOT make publish-locally

      - name: Integration tests with unsupported schema
        run: |
          cd examples/with_forbidden_generation_type
          if (set -o pipefail && atlas schema inspect --env hibernate --url env://src 2>&1 | tee /tmp/forbidden_output); then
              echo "expected schema extraction to fail due to an unsupported SQL command" && false
          else
              echo "command failed successfully, checking output contains error string"
              grep -i "unsupported.sql.command" /tmp/forbidden_output || (echo "Failed output comparison, output was:" && cat /tmp/forbidden_output && false)
              echo "error string found"
          fi

      - name: Integration tests
        run: |
          set -x
          # Function to normalize paths and diff with expected output
          normalize_and_diff() {
            local output_file="$1"
            local expected_file="$2"
            sed "s|$(pwd)/||g" "$output_file" > "${output_file}_normalized"
            diff "${output_file}_normalized" "$expected_file"
          }
          
          cd examples/with_local_plugin_repository
          ./gradlew -q schema | tee schema_output
          normalize_and_diff schema_output src/test/expected_default_schema
          ./gradlew integrationTests
          
          cd ../maven_project_example
          mvn compile --batch-mode

          cd allowed_types
          mvn -q hibernate-provider:schema | tee maven_schema_output 
          normalize_and_diff maven_schema_output src/test/expected_default_schema

          mvn -q hibernate-provider:schema@schema-using-postgresql-properties | tee maven_psql_output
          normalize_and_diff maven_psql_output src/test/expected_postgresql_output

          mvn -q hibernate-provider:schema -Dregistry-builder=com.example.H2ServiceRegistryBuilder | tee maven_h2_output
          normalize_and_diff maven_h2_output src/test/expected_h2_output

          mvn -q hibernate-provider:schema -Dmetadata-builder=com.example.MetadataBuilder | tee maven_mini_output
          normalize_and_diff maven_mini_output src/test/expected_mini_output

          mvn -q hibernate-provider:schema -Dpackages="com.example.model" | tee maven_employee_output
          normalize_and_diff maven_employee_output src/test/expected_employee_output

          mvn -q hibernate-provider:schema -Dpackages="com.example.model" -Dclasses="com.example.minimodel.Location" | tee maven_classes_and_packages_output
          normalize_and_diff maven_classes_and_packages_output src/test/expected_default_schema

          atlas schema lint --env hibernate | tee lint_output
          # Trim to match expected output length, then normalize and diff
          head -n $(wc -l < src/test/expected_lint_output) lint_output > lint_output_trimmed
          normalize_and_diff lint_output_trimmed src/test/expected_lint_output


          cd ../forbidden_types
          if (set -o pipefail && atlas schema inspect --env hibernate --url env://src 2>&1 | tee /tmp/forbidden_output); then
            echo "expected schema extraction to fail due to an unsupported SQL command" && false
          else
            echo "command failed successfully, checking output contains error string"
            grep -i "unsupported GenerationType.SEQUENCE" /tmp/forbidden_output || (echo "Failed output comparison, output was:" && cat /tmp/forbidden_output && false)
            echo "error string found"
          fi
          set +x

      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      - name: E2E test spring project
        run: |
          cd examples/with_spring_gradle
          output=$(atlas migrate diff --env hibernate)
          [ "$output" = "The migration directory is synced with the desired state, no changes to be made" ] || (echo "diff detected? unexpected output: $output"; ls -l migrations; exit 1)

      - name: E2E test maven project
        run: |
          cd examples/maven_project_example/allowed_types
          output=$(atlas migrate diff --env hibernate)
          [ "$output" = "The migration directory is synced with the desired state, no changes to be made" ] || (echo "diff detected? unexpected output: $output"; ls -l migrations; exit 1)

      - name: Release
        if: github.event_name == 'workflow_dispatch'
        run: |
          export PROVIDER_VERSION=${{ inputs.version }}
          cd hibernate-provider
          mvn clean deploy -Pproduction --batch-mode -Drevision=$PROVIDER_VERSION -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}
          cd ../gradle-plugin
          ./gradlew publishPlugins -P production=true
          cd ../maven-plugin
          mvn clean deploy -Pproduction --batch-mode -Dprovider.version=$PROVIDER_VERSION -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} -s settings.xml

      - name: Cleanup
        if: always()
        run: |
          rm ~/.gradle/gradle.properties
          rm /tmp/gpg.key
